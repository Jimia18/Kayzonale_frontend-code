import React, { useEffect, useState } from "react";
import AdminSidebar from "../../components/AdminSidebar";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from "recharts";
import axios from "axios";
import "../../styles/adminDashboard.css";

const DashboardHome = () => {
  const [stats, setStats] = useState({});
  const [recentOrders, setRecentOrders] = useState([]);
  const [recentPayments, setRecentPayments] = useState([]);

  useEffect(() => {
    fetchStats();
    fetchRecentOrders();
    fetchRecentPayments();
  }, []);

  const fetchStats = async () => {
    try {
      const res = await axios.get("/api/v1/orders/stats", {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` }
      });
      setStats(res.data);
    } catch (error) {
      console.error("Failed to fetch dashboard stats", error);
    }
  };

  const fetchRecentOrders = async () => {
    try {
      const res = await axios.get("/api/v1/orders?limit=5", {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` }
      });
      setRecentOrders(res.data.slice(0, 5));
    } catch (error) {
      console.error("Failed to fetch recent orders", error);
    }
  };

  const fetchRecentPayments = async () => {
    try {
      const res = await axios.get("/api/v1/payments", {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` }
      });
      setRecentPayments(res.data.slice(0, 5));
    } catch (error) {
      console.error("Failed to fetch recent payments", error);
    }
  };

  const chartData = [
    { name: "Orders", value: stats.total_orders || 0 },
    { name: "Pending", value: stats.pending_orders || 0 },
    { name: "Completed", value: stats.completed_orders || 0 },
  ];

  return (
    <div className="admin-dashboard">
      <AdminSidebar />
      <div className="main-content">
        <h2 className="text-2xl font-semibold mb-4">Dashboard Overview</h2>

        {/* Stats Section */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div className="card">
            <p className="card-title">Total Orders</p>
            <h4>{stats.total_orders}</h4>
          </div>
          <div className="card">
            <p className="card-title">Total Revenue</p>
            <h4>UGX {stats.total_revenue}</h4>
          </div>
          <div className="card">
            <p className="card-title">Monthly Revenue</p>
            <h4>UGX {stats.monthly_revenue}</h4>
          </div>
        </div>

        {/* Chart */}
        <div className="chart-section">
          <h3 className="section-title">Order Status</h3>
          <ResponsiveContainer width="100%" height={250}>
            <BarChart data={chartData}>
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="value" fill="#4f46e5" radius={[8, 8, 0, 0]} />
            </BarChart>
          </ResponsiveContainer>
        </div>

        {/* Tables */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
          {/* Recent Orders */}
          <div className="table-box">
            <h4 className="section-title">Recent Orders</h4>
            <table>
              <thead>
                <tr>
                  <th>Order ID</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {recentOrders.map((o) => (
                  <tr key={o.order_id}>
                    <td>{o.order_id}</td>
                    <td>{o.status}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Recent Payments */}
          <div className="table-box">
            <h4 className="section-title">Recent Payments</h4>
            <table>
              <thead>
                <tr>
                  <th>Amount</th>
                  <th>Method</th>
                </tr>
              </thead>
              <tbody>
                {recentPayments.map((p) => (
                  <tr key={p.payment_id}>
                    <td>UGX {p.amount}</td>
                    <td>{p.method}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DashboardHome;
